
import express from "express";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { localBooksProcessor } from "../services/localBooksProcessor";

const router = express.Router();

if (!process.env.GEMINI_API_KEY) {
  throw new Error("‚õîÔ∏è GEMINI_API_KEY manquante");
}

const ai = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = ai.getGenerativeModel({
  model: "gemini-1.5-flash-latest",
  systemInstruction: {
    role: "system", 
    parts: [{
      text: `Tu es Le Compagnon du C≈ìur, guide spirituel expert en enseignements de Rabbi Nahman de Breslov.

R√àGLES ABSOLUES :
- R√©ponds TOUJOURS en fran√ßais
- UTILISE EXCLUSIVEMENT les textes fournis dans le contexte
- CITE TOUJOURS la source exacte [Nom du livre - Section X] 
- Si contexte fourni, base-toi UNIQUEMENT sur ces textes
- Ton ton est chaleureux, sage et bienveillant
- Explique les concepts spirituels simplement
- Donne des conseils pratiques bas√©s sur les enseignements

FORMAT DE R√âPONSE OBLIGATOIRE :
1. R√©ponse directe √† la question (2-3 paragraphes)
2. Citation pr√©cise avec [Source exacte]
3. Enseignement spirituel principal
4. Application pratique dans la vie quotidienne
5. Invitation √† approfondir

Ne r√©ponds JAMAIS avec tes connaissances g√©n√©rales si un contexte sp√©cifique est fourni.`
    }]
  }
});

router.post("/chat", async (req, res) => {
  try {
    const { text, ref } = req.body;

    if (!text || text.trim().length === 0) {
      return res.status(400).json({ error: "Question vide" });
    }

    console.log(`[Chat] üìù Question re√ßue: "${text.substring(0, 100)}..."`);

    let prompt = text;
    let contextFound = false;

    // PRIORIT√â 1: Recherche dans les livres locaux
    try {
      console.log('[Chat] üîç Recherche dans les livres locaux...');
      await localBooksProcessor.initialize();
      
      const relevantContent = await localBooksProcessor.searchRelevantContent(text, 5);
      
      if (relevantContent.length > 0) {
        console.log(`[Chat] ‚úÖ ${relevantContent.length} passages trouv√©s dans les livres locaux`);
        
        const contextFromLocalBooks = relevantContent
          .map((content, index) => `PASSAGE ${index + 1}:\n${content}`)
          .join('\n\n---\n\n');
        
        prompt = `CONTEXTE DES ENSEIGNEMENTS DE RABBI NAHMAN:
${contextFromLocalBooks}

QUESTION: ${text}

R√©ponds en te basant UNIQUEMENT sur ces textes authentiques. Cite pr√©cis√©ment les sources.`;
        contextFound = true;
      } else {
        console.log('[Chat] ‚ö†Ô∏è Aucun passage trouv√© dans les livres locaux');
      }
    } catch (localError) {
      console.error('[Chat] ‚ùå Erreur recherche livres locaux:', localError);
    }

    // PRIORIT√â 2: Fallback Sefaria si r√©f√©rence fournie
    if (!contextFound && ref) {
      try {
        console.log(`[Chat] üîç Fallback Sefaria pour: ${ref}`);
        const textResponse = await fetch(`${process.env.BASE_URL || 'http://localhost:5000'}/api/sefaria/texts/${encodeURIComponent(ref)}`);
        
        if (textResponse.ok) {
          const textData = await textResponse.json();
          const contextText = textData.text?.join(' ') || textData.he?.join(' ') || '';
          
          if (contextText) {
            prompt = `CONTEXTE DU TEXTE "${ref}":
${contextText.slice(0, 2000)}...

QUESTION: ${text}

R√©ponds en te basant sur ce texte sp√©cifique.`;
            contextFound = true;
            console.log('[Chat] ‚úÖ Contexte Sefaria trouv√©');
          }
        }
      } catch (contextError) {
        console.warn('[Chat] ‚ö†Ô∏è √âchec r√©cup√©ration Sefaria:', contextError);
      }
    }

    // PRIORIT√â 3: Mode g√©n√©ral avec guidance
    if (!contextFound) {
      console.log('[Chat] üìö Mode g√©n√©ral avec guidance spirituelle');
      prompt = `Tu es Le Compagnon du C≈ìur. La question pos√©e est: "${text}"

R√©ponds avec sagesse spirituelle bas√©e sur les enseignements de Rabbi Nahman de Breslov. 
M√™me sans texte sp√©cifique, donne des conseils empreints de cette tradition spirituelle.
Sois chaleureux et encourageant.`;
    }

    console.log(`[Chat] ü§ñ Envoi √† Gemini (contexte: ${contextFound ? 'Oui' : 'Non'})`);

    const chat = model.startChat();
    const result = await chat.sendMessage(prompt);
    const response = result.response.text();

    if (!response || response.trim().length === 0) {
      throw new Error("R√©ponse vide de l'IA");
    }

    console.log(`[Chat] ‚úÖ R√©ponse g√©n√©r√©e (${response.length} caract√®res)`);

    res.json({ 
      answer: response.trim()
    });

  } catch (error) {
    console.error("[Chat] ‚ùå Erreur:", error);

    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue";

    if (errorMessage.includes('quota') || errorMessage.includes('limit')) {
      return res.status(429).json({ 
        error: "Le guide spirituel est temporairement surcharg√©. Veuillez patienter un moment."
      });
    }

    res.status(500).json({ 
      error: "Le guide spirituel est temporairement indisponible. Veuillez r√©essayer."
    });
  }
});

// Enhanced ask endpoint with guaranteed book access
router.post('/ask', async (req, res) => {
  try {
    const { question } = req.body;
    console.log(`[Ask] üìù Question: "${question?.substring(0, 100)}..."`);

    if (!question || question.trim().length === 0) {
      return res.status(400).json({ error: "Question vide" });
    }

    // Force l'acc√®s aux livres locaux
    console.log('[Ask] üîç Recherche garantie dans les livres...');
    await localBooksProcessor.initialize();
    
    const books = localBooksProcessor.getAvailableBooks();
    console.log(`[Ask] üìö ${books.length} livres disponibles:`, books.slice(0, 3));

    const relevantContent = await localBooksProcessor.searchRelevantContent(question, 8);
    console.log(`[Ask] ‚úÖ ${relevantContent.length} passages trouv√©s`);

    let enhancedPrompt = question;
    
    if (relevantContent.length > 0) {
      const contextualContent = relevantContent
        .map((content, index) => `ENSEIGNEMENT ${index + 1}:\n${content.substring(0, 800)}...`)
        .join('\n\n---\n\n');
      
      enhancedPrompt = `CONTEXTE AUTHENTIQUE DES ENSEIGNEMENTS DE RABBI NAHMAN:

${contextualContent}

QUESTION: ${question}

R√©ponds en te basant UNIQUEMENT sur ces enseignements authentiques. Structure ta r√©ponse ainsi:
1. R√©ponse spirituelle d√©taill√©e (300-400 mots)
2. R√©f√©rences exactes des enseignements utilis√©s
3. Enseignement spirituel principal √† retenir
4. Conseils pratiques pour la vie quotidienne
5. Encouragement personnel

Utilise un ton chaleureux et sage.`;
    } else {
      enhancedPrompt = `QUESTION SPIRITUELLE: ${question}

En tant que Compagnon du C≈ìur vers√© dans les enseignements de Rabbi Nahman de Breslov, r√©ponds avec sagesse et bienveillance. M√™me sans texte sp√©cifique, puise dans la tradition spirituelle breslov pour offrir guidance et encouragement.`;
    }

    const askModel = ai.getGenerativeModel({ 
      model: "gemini-1.5-pro-latest",
      generationConfig: {
        maxOutputTokens: 2048,
        temperature: 0.3,
        topP: 0.95,
      }
    });

    console.log('[Ask] ü§ñ G√©n√©ration de la r√©ponse...');
    const result = await askModel.generateContent(enhancedPrompt);
    const answer = result.response.text().trim();

    console.log(`[Ask] ‚úÖ R√©ponse g√©n√©r√©e (${answer.length} caract√®res, ${relevantContent.length} sources)`);

    res.json({ answer });
    
  } catch (error) {
    console.error('[Ask] ‚ùå Erreur:', error);
    res.status(500).json({ 
      error: "Erreur lors de la g√©n√©ration de la r√©ponse. Veuillez r√©essayer."
    });
  }
});

export default router;
