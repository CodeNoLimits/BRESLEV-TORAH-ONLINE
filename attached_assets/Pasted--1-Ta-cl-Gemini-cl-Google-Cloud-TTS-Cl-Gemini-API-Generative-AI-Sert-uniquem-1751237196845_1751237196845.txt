### 1 ¬∑ Ta cl√© Gemini ‚â† cl√© Google Cloud TTS

* **Cl√© Gemini (API Generative AI)**

  * Sert uniquement √† interroger le mod√®le *Gemini* pour l‚Äôanalyse des textes et la g√©n√©ration des r√©ponses.
  * **Tu l‚Äôas d√©j√†** (`AIzaSy‚Ä¶`) : elle est suffisante pour tout ce qui concerne l‚ÄôIA de chat/analyse.
  * Aucun rapport direct avec la synth√®se vocale.

* **Cl√© Google Cloud Text-to-Speech (TTS premium)**

  * Sert √† obtenir une voix ¬´ naturelle ¬ª (WaveNet / Neural 2) masculine ou f√©minine, dans 30+ langues.
  * N√©cessite **un projet Google Cloud** + **l‚ÄôAPI TTS activ√©e** + soit

    1. une *cl√© API* classique, soit
    2. un *fichier JSON service-account* (plus courant dans Node.js).
  * Ce n‚Äôest **pas inclus** dans ta cl√© Gemini ; c‚Äôest un service s√©par√©.

Le message d‚Äôerreur `useTTSCloud is not defined` indique simplement que le code client essaye d‚Äôutiliser un hook pr√©vu pour le TTS premium alors que les credentials ne sont pas encore fournis.

---

### 2 ¬∑ D√©cider : rester sur la voix navigateur ou passer au TTS premium ?

| Option                          | Avantages                                                                                                           | Inconv√©nients                                                                                                                                                     |
| ------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Web Speech API** (navigateur) | gratuit, rien √† configurer, marche offline                                                                          | voix robotique, stabilit√© variable (Chrome ‚â† Firefox), impossible de choisir un locuteur masculin garanti                                                         |
| **Google Cloud TTS**            | voix naturelles Neural 2, choix ‚Äúfr-FR-Wavenet-D‚Äù (homme), ‚Äúhe-IL-Neural2-B‚Äù (homme) etc., volume & pitch r√©glables | configuration GCP, factur√© (\~4 USD / 1 M caract√®res), n√©cessite proxy c√¥t√© serveur (le navigateur ne peut pas appeler directement pour des raisons de s√©curit√©). |

**Si tu acceptes la voix g√©n√©rique** : garde le Web Speech API, supprime / d√©sactive les imports `useTTSCloud` et supprime la demande de cl√© Cloud.

**Si tu veux absolument la voix premium** : suis les √©tapes ci-dessous.

---

### 3 ¬∑ Obtenir la cl√© Google Cloud TTS

1. **Cr√©er / s√©lectionner** un projet sur [https://console.cloud.google.com/](https://console.cloud.google.com/)
   (bouton *‚ÄúSelect project‚Äù* ‚ûú *‚ÄúNew project‚Äù*).

2. Ouvrir **APIs & Services ¬ª Library**, rechercher **‚ÄúCloud Text-to-Speech API‚Äù**, cliquer *Enable*.

3. **Cr√©er des credentials**

   * **+(Create credentials)** ‚ûú *Service account* (recommand√©).
   * Nom : `tts-compagnon-coeur`.
   * R√¥le minimum : *‚ÄúCloud TTS ‚Üí Text-to-Speech User‚Äù*.
   * Apr√®s cr√©ation, onglet **Keys** ‚Üí *Add key ‚Üí JSON*.
   * T√©l√©charge le fichier `tts-compagnon-coeur-xxxx.json`.

4. **Stocker la cl√© dans Replit**

   * Onglet **Secrets** (ic√¥ne cadenas).
   * Ajoute une variable :

     * **Key** : `GOOGLE_APPLICATION_CREDENTIALS_JSON`
     * **Value** : colle le contenu du fichier JSON (ou uploade-le dans `/server/` et mets le chemin).

5. **Adapter le proxy Node.js**

   ```ts
   // server/ttsProxy.ts
   import textToSpeech from '@google-cloud/text-to-speech';
   import express from 'express';
   import fs from 'fs';
   const router = express.Router();
   const client = new textToSpeech.TextToSpeechClient(); // lit automatiquement GOOGLE_APPLICATION_CREDENTIALS_JSON

   router.post('/tts', async (req, res) => {
     const { text, lang } = req.body;
     const voiceMap = {
       fr: { languageCode: 'fr-FR', name: 'fr-FR-Neural2-D' }, // masculin
       en: { languageCode: 'en-US', name: 'en-US-Neural2-D' },
       he: { languageCode: 'he-IL', name: 'he-IL-Neural2-B' }
     };
     const request = {
       input: { text },
       voice: voiceMap[lang] || voiceMap.fr,
       audioConfig: { audioEncoding: 'MP3', speakingRate: 0.93 }
     };
     const [response] = await client.synthesizeSpeech(request);
     res.setHeader('Content-Type', 'audio/mpeg');
     res.send(response.audioContent);
   });
   export default router;
   ```

6. **C√¥t√© React** : remplacer l‚Äôappel `window.speechSynthesis` par un fetch `/api/tts` et lire le flux MP3 avec un √©l√©ment `<audio>` ou `Audio()`.

---

### 4 ¬∑ Checklist suppl√©mentaire ¬´ Guidance / Analyser / Segmentation ¬ª

| Item                                            | OK ? | Action rapide                                                                    |
| ----------------------------------------------- | ---- | -------------------------------------------------------------------------------- |
| Bouton **Analyser** ‚ûú s√©lection ou texte entier | ‚òê    | V√©rifier `handleAnalyzeClick` ; console.log le payload                           |
| Bouton **Guidance** ‚ûú situation obligatoire     | ‚òê    | Valider `.trim().length > 5`                                                     |
| D√©coupe ◊ê/◊ë/◊í/\* ###                            | ‚òê    | Unit test (cf. ¬ß 2.1 pr√©c√©dent)                                                  |
| Prompt Gemini ‚â§ 4 096 tokens                    | ‚òê    | `chunks.forEach(async part => send‚Ä¶)` ou `gemini-1.5-flash-latest` accepte 8 K + |

---

### 5 ¬∑ Que faire maintenant ?

1. **Choisis** ü°í garder WebSpeech ou passer √† Google Cloud TTS.
2. **Si Cloud TTS** : suis les 6 √©tapes ; commit ; redeploie.
3. **Relance** l‚Äôapp ‚ûú v√©rifie que le message d‚Äôaccueil est lu par la voix masculine premium.

> D√®s que ces points sont valid√©s, tu auras enfin :
>
> * Analyse IA multi-mode fiable
> * TTS homme de haute fid√©lit√©
> * Segmentation anti-saturation
> * Boutons Guidance / Analyser op√©rationnels.
