# ✅ VERSION QUI MARCHE - Python
# pip install requests

import requests
import json
import time
from typing import Dict, Optional, List

class SefariaAPI:
    def __init__(self):
        self.base_url = "https://www.sefaria.org/api"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (compatible; SefariaBot/1.0)',
            'Accept': 'application/json'
        })
    
    def fetch_text(self, reference: str) -> Optional[Dict]:
        """
        ✅ Récupère un texte depuis Sefaria
        
        Args:
            reference: Référence Sefaria (ex: 'Genesis.1.1', 'Talmud.Berakhot.2a')
            
        Returns:
            Dict avec les données du texte ou None si erreur
        """
        try:
            url = f"{self.base_url}/texts/{reference}"
            print(f"📡 Fetching: {url}")
            
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            if 'error' in data:
                raise Exception(f"API Error: {data['error']}")
            
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"❌ Erreur réseau: {e}")
            return None
        except Exception as e:
            print(f"❌ Erreur: {e}")
            return None
    
    def search(self, query: str, size: int = 10) -> Optional[Dict]:
        """
        ✅ Recherche dans Sefaria
        
        Args:
            query: Terme à rechercher
            size: Nombre de résultats max
            
        Returns:
            Dict avec les résultats de recherche
        """
        try:
            url = f"{self.base_url}/search-wrapper"
            params = {'q': query, 'size': size}
            
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.json()
            
        except Exception as e:
            print(f"❌ Erreur recherche: {e}")
            return None
    
    def get_index(self, title: str = None) -> Optional[Dict]:
        """
        ✅ Récupère l'index des textes
        
        Args:
            title: Titre spécifique (optionnel)
            
        Returns:
            Dict avec l'index
        """
        try:
            if title:
                url = f"{self.base_url}/v2/index/{title}"
            else:
                url = f"{self.base_url}/index/"
            
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            
            return response.json()
            
        except Exception as e:
            print(f"❌ Erreur index: {e}")
            return None

def display_text(data: Dict):
    """Affiche le texte de manière lisible"""
    print("\n📖 RÉSULTAT:")
    print("━" * 50)
    print(f"📚 Livre: {data.get('book', 'N/A')}")
    print(f"🔖 Référence: {data.get('ref', 'N/A')}")
    
    # Texte hébreu
    hebrew = data.get('he')
    if hebrew:
        if isinstance(hebrew, list):
            hebrew = ' '.join(str(h) for h in hebrew if h)
        print(f"\n🔤 Hébreu:\n{hebrew}")
    
    # Texte anglais
    english = data.get('text')
    if english:
        if isinstance(english, list):
            english = ' '.join(str(e) for e in english if e)
        print(f"\n🇺🇸 Anglais:\n{english}")
    
    print("━" * 50 + "\n")

def main():
    """✅ TESTS QUI MARCHENT"""
    sefaria = SefariaAPI()
    
    # Tests de références diverses
    test_references = [
        'Genesis.1.1',
        'Psalms.23.1',
        'Talmud.Berakhot.2a',
        'Mishnah.Berakhot.1.1',
        'Sefer HaMidot.1.1'
    ]
    
    print("🚀 Début des tests Sefaria API\n")
    
    for ref in test_references:
        print(f"🔍 Test: {ref}")
        data = sefaria.fetch_text(ref)
        
        if data:
            display_text(data)
        else:
            print(f"❌ Échec pour {ref}\n")
        
        # Délai poli
        time.sleep(1)
    
    # Test de recherche
    print("🔍 Test de recherche:")
    results = sefaria.search("creation", size=3)
    if results and 'hits' in results:
        print(f"📊 Trouvé {len(results['hits'])} résultats")
        for i, hit in enumerate(results['hits'][:3], 1):
            content = hit.get('content', '')[:100]
            print(f"{i}. {hit.get('ref', 'N/A')}: {content}...")
    
    print("\n✅ Tests terminés!")

# ✅ USAGE SIMPLE
def quick_fetch(reference: str):
    """Fonction rapide pour récupérer un texte"""
    sefaria = SefariaAPI()
    data = sefaria.fetch_text(reference)
    if data:
        display_text(data)
    return data

if __name__ == "__main__":
    main()
    
    # Exemples d'usage:
    # quick_fetch('Genesis.1.1')
    # quick_fetch('Psalms.23')
    # quick_fetch('Talmud.Berakhot.2a')