### Pourquoi √ßa coince ?

1. **Replit (preview) = domaine diff√©rent** de `https://www.sefaria.org`  ‚Üí le navigateur bloque la requ√™te (CORS).
2. Sefaria **n‚Äôajoute pas** `Access-Control-Allow-Origin: *` sur **toutes** ses routes JSON.
3. Replit **n‚Äôautorise pas** de requ√™tes sortantes mixtes HTTP/HTTPS depuis l‚Äôiframe preview.

### Solution ¬´ drastique ¬ª mais simple : **proxy interne**

Fais rouler un petit serveur Node/Express **dans le m√™me Replit**, qui relaie toutes les requ√™tes Sefaria.
Comme le front et le proxy partagent le m√™me domaine Replit, **plus de CORS**, plus de blocage.

---

## √âtapes √† demander (ou √† faire toi-m√™me) imm√©diatement  ‚¨áÔ∏è

| √âtape | Fichier                                                                                  | Extrait (pseudo-code, pas √† copier tel quel)                                                                                                                                                                                                                                                                                                                                                       | Pourquoi                                               |                                                                    |                                                                                  |
| ----- | ---------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ | ------------------------------------------------------------------ | -------------------------------------------------------------------------------- |
| 1     | **`proxy.js`**                                                                           | \`\`\`js const express=require('express'); const fetch=require('node-fetch'); const app=express(); app.get('/sefaria/*', async (req,res)=>{  const url='[https://www.sefaria.org/api/'+req.params\[0](https://www.sefaria.org/api/'+req.params[0)];  const r=await fetch(url);  const data=await r.text();  res.header('Access-Control-Allow-Origin','*');  res.type(r.headers.get('content-type') |                                                        | 'application/json');  res.send(data); }); app.listen(3000); \`\`\` | Proxy GET brut : tout ce qui arrive sous `/sefaria/...` est retransmis tel quel. |
| 2     | **`package.json`**                                                                       | `json "scripts": { "dev": "concurrently \"vite\" \"node proxy.js\"" } ` + d√©pendances `express`, `node-fetch`, `concurrently`                                                                                                                                                                                                                                                                      | D√©marre Vite **et** le proxy en un seul `npm run dev`. |                                                                    |                                                                                  |
| 3     | **`sefariaService.ts`**                                                                  | ``ts const BASE = '/sefaria';  // plus https://...  fetch(`${BASE}/index/`) ``                                                                                                                                                                                                                                                                                                                     | Le front frappe le proxy ‚Üí m√™me origine.               |                                                                    |                                                                                  |
| 4     | D√©clarer **variables d‚Äôenvironnement** : rien √† changer (Sefaria n‚Äôa pas besoin de cl√©). | -                                                                                                                                                                                                                                                                                                                                                                                                  |                                                        |                                                                    |                                                                                  |
| 5     | **Tester**                                                                               | `npm run dev` ‚Üí preview ‚Üí la biblioth√®que doit se remplir.                                                                                                                                                                                                                                                                                                                                         |                                                        |                                                                    |                                                                                  |

---

### Points suppl√©mentaires √† dire √† Gemini (copie/colle) üìã

> **Instructions strictes pour la nouvelle version :**
>
> 1. **Ajouter un proxy Node/Express** dans `proxy.js` (exemple ci-dessous) pour relayer *toutes* les routes `/sefaria/*` vers `https://www.sefaria.org/api/*`, en renvoyant les en-t√™tes CORS permissifs.
> 2. **Modifier `package.json`** : script `"dev"` lance **concurrently** Vite *et* le proxy.
> 3. **Changer `services/sefariaService.ts`** : remplacer `SEFARIA_API_BASE_URL` par `''` et pr√©fixer toutes les requ√™tes avec `/sefaria`.
> 4. Conserver l‚Äôarchitecture React/TypeScript/Streaming Gemini + les **5 modes IA** d√©j√† d√©crits.
> 5. **Palette CSS** & layout restent bas√©s sur TikounaOlam : fond `#0f172a`, texte `slate-200`, accents `sky-500` & `amber-500`, coins `rounded-2xl`, ombres douces.
> 6. Recompiler et tester la biblioth√®que : elle doit lister **100 %** des titres Breslev (v√©rifier qu‚Äôun clic sur *Likoutey Moharan* ‚Üí sous-niveaux apparaissent, etc.).
> 7. Si une requ√™te √©choue, logguer `console.error('[Proxy error]', url, err)` pour debug rapide.

*(Ajoute ce bloc d‚Äôinstructions avant tout code que tu lui envoies.)*

---

### Pourquoi cette m√©thode est la plus s√ªre ?

* **Z√©ro d√©pendance** √† des services externes de contournement (AllOrigins, CORS-Anywhere finissent bloqu√©s).
* **D√©ployable partout** : Replit, Vercel, Render, m√™me un VPS nu.
* **Scalable** : si plus tard tu veux mise en cache Redis, tu l‚Äôajoutes dans le proxy.
* **S√©curis√©** : tu choisis exactement quelles routes tu ouvres.

Lance √ßa maintenant ; d√®s que la biblioth√®que se charge sans erreur r√©seau, tu sais que CORS est r√©gl√© et tu peux repartir.
