[tool.poetry]
name = "breslev-torah-backend"
version = "1.0.0"
description = "Backend API for Breslev Torah Online - FastAPI application with PostgreSQL, Redis, and AI integration"
authors = ["Breslev Torah Team <contact@breslevtorah.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"

# FastAPI and web framework
fastapi = "^0.112.0"
uvicorn = {extras = ["standard"], version = "^0.30.5"}
pydantic = "^2.8.2"
pydantic-settings = "^2.4.0"

# Database
sqlalchemy = "^2.0.31"
sqlmodel = "^0.0.21"
asyncpg = "^0.29.0"
alembic = "^1.13.2"
psycopg2-binary = "^2.9.9"

# Redis and caching
redis = "^5.0.7"
aioredis = "^2.0.1"

# Authentication and security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.9"
cryptography = "^41.0.7"

# HTTP clients
httpx = "^0.27.0"
aiohttp = "^3.9.5"

# AI and ML
google-generativeai = "^0.7.2"
openai = "^1.40.3"
chromadb = "^0.5.5"
sentence-transformers = "^3.0.1"

# Audio processing
pydub = "^0.25.1"
edge-tts = "^6.1.12"
gtts = "^2.5.1"

# Data processing
pandas = "^2.2.2"
numpy = "^1.26.4"
python-docx = "^1.1.2"
PyPDF2 = "^3.0.1"
beautifulsoup4 = "^4.12.3"
lxml = "^4.9.4"

# Utilities
python-dotenv = "^1.0.1"
pyyaml = "^6.0.1"
click = "^8.1.7"
rich = "^13.7.1"
typer = "^0.12.3"

# Monitoring and logging
structlog = "^24.2.0"
sentry-sdk = {extras = ["fastapi"], version = "^2.10.0"}

# Email
emails = "^0.6"
jinja2 = "^3.1.4"

# File handling
python-magic = "^0.4.27"
pillow = "^10.4.0"

[tool.poetry.group.dev.dependencies]
# Code formatting and linting
black = "^23.12.1"
isort = "^5.13.2"
ruff = "^0.1.9"
mypy = "^1.8.0"

# Testing
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.0"
coverage = "^7.6.0"

# Security
bandit = "^1.7.5"
safety = "^2.3.5"

# Documentation
pydocstyle = "^6.3.0"
sphinx = "^7.4.7"
sphinx-rtd-theme = "^2.0.0"

# Development tools
pre-commit = "^3.8.0"
ipython = "^8.26.0"
jupyter = "^1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "S101",   # Use of assert
    "S104",   # Possible binding to all interfaces
    "COM812", # Trailing comma missing
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "S105", "S106"]
"migrations/*" = ["INP001"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "edge_tts.*",
    "gtts.*",
    "sentence_transformers.*",
    "factory.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "auth: marks tests related to authentication",
    "database: marks tests that require database",
    "redis: marks tests that require Redis",
    "ai: marks tests that require AI services",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105"]